<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Primitives</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.Primitives.CancellationChangeToken">
            <summary>
            A <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> implementation using <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CancellationChangeToken.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Primitives.CancellationChangeToken"/>.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CancellationChangeToken.ActiveChangeCallbacks">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CancellationChangeToken.HasChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CancellationChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Primitives.ChangeToken">
            <summary>
            Propagates notifications that a change has occured.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.ChangeToken.OnChange(System.Func{Microsoft.Extensions.Primitives.IChangeToken},System.Action)">
            <summary>
            Registers the <paramref name="changeTokenConsumer"/> action to be called whenever the token produced changes.
            </summary>
            <param name="changeTokenProducer">Produces the change token.</param>
            <param name="changeTokenConsumer">Action called when the token changes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.ChangeToken.OnChange``1(System.Func{Microsoft.Extensions.Primitives.IChangeToken},System.Action{``0},``0)">
            <summary>
            Registers the <paramref name="changeTokenConsumer"/> action to be called whenever the token produced changes.
            </summary>
            <param name="changeTokenProducer">Produces the change token.</param>
            <param name="changeTokenConsumer">Action called when the token changes.</param>
            <param name="state">state for the consumer.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.CompositeChangeToken">
            <summary>
            An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> which represents one or more <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CompositeChangeToken.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Extensions.Primitives.CompositeChangeToken"/>.
            </summary>
            <param name="changeTokens">The list of <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> to compose.</param>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CompositeChangeToken.ChangeTokens">
            <summary>
            Returns the list of <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> which compose the current <see cref="T:Microsoft.Extensions.Primitives.CompositeChangeToken"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CompositeChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CompositeChangeToken.HasChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CompositeChangeToken.ActiveChangeCallbacks">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.Extensions.Append(System.Text.StringBuilder,Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Add the given <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to add to.</param>
            <param name="segment">The <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> to add.</param>
            <returns>The original <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.IChangeToken">
            <summary>
            Propagates notifications that a change has occured.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged">
            <summary>
            Gets a value that indicates if a change has occured.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks">
            <summary>
            Indicates if this token will pro-actively raise callbacks. Callbacks are still guaranteed to fire, eventually.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <summary>
            Registers for a callback that will be invoked when the entry has changed.
            <see cref="P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged"/> MUST be set before the callback is invoked.
            </summary>
            <param name="callback">The <see cref="T:System.Action`1"/> to invoke.</param>
            <param name="state">State to be passed into the callback.</param>
            <returns>An <see cref="T:System.IDisposable"/> that is used to unregister the callback.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.Resources.Argument_InvalidOffsetLength">
            <summary>
              查找类似 Offset and length are out of bounds for the string or length is greater than the number of characters from index to the end of the string. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.StringSegment">
            <summary>
            An optimized representation of a substring.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Primitives.StringSegment.Empty">
            <summary>
            A <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> for <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> struct.
            </summary>
            <param name="buffer">
            The original <see cref="T:System.String"/>. The <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> includes the whole <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> struct.
            </summary>
            <param name="buffer">The original <see cref="T:System.String"/> used as buffer.</param>
            <param name="offset">The offset of the segment within the <paramref name="buffer"/>.</param>
            <param name="length">The length of the segment.</param>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Buffer">
            <summary>
            Gets the <see cref="T:System.String"/> buffer for this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Offset">
            <summary>
            Gets the offset within the buffer for this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Length">
            <summary>
            Gets the length of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Value">
            <summary>
            Gets the value of this segment as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.HasValue">
            <summary>
            Gets whether or not this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> contains a valid value.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Char"/> at a specified position in the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            </summary>
            <param name="index">The offset into the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/></param>
            <returns>The <see cref="T:System.Char"/> at a specified position.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><code>true</code> if the current object is equal to the other parameter; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns><code>true</code> if the current object is equal to the other parameter; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)">
            <summary>
            Determines whether two specified StringSegment objects have the same value. A parameter specifies the culture, case, and
            sort rules used in the comparison.
            </summary>
            <param name="a">The first StringSegment to compare.</param>
            <param name="b">The second StringSegment to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns><code>true</code> if the objects are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)">
            <summary>
            Checks if the specified <see cref="T:System.String"/> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to compare with the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</param>
            <returns><code>true</code> if the specified <see cref="T:System.String"/> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,System.StringComparison)">
            <summary>
            Checks if the specified <see cref="T:System.String"/> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to compare with the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns><code>true</code> if the specified <see cref="T:System.String"/> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.GetHashCode">
            <inheritdoc />
            <remarks>
            This GetHashCode is expensive since it allocates on every call.
            However this is required to ensure we retain any behavior (such as hash code randomization) that
            string.GetHashCode has.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Checks if two specified <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> have the same value.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> to compare, or <code>null</code>.</param>
            <param name="right">The second <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> to compare, or <code>null</code>.</param>
            <returns><code>true</code> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Checks if two specified <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> have different values.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> to compare, or <code>null</code>.</param>
            <param name="right">The second <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> to compare, or <code>null</code>.</param>
            <returns><code>true</code> if the value of <paramref name="left"/> is different from the value of <paramref name="right"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Implicit(System.String)~Microsoft.Extensions.Primitives.StringSegment">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> from the given <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to convert to a <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/></param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,System.StringComparison)">
            <summary>
            Checks if the beginning of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> matches the specified <see cref="T:System.String"/> when compared using the specified <paramref name="comparisonType"/>.
            </summary>
            <param name="text">The <see cref="T:System.String"/>to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns><code>true</code> if <paramref name="text"/> matches the beginning of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,System.StringComparison)">
            <summary>
            Checks if the end of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> matches the specified <see cref="T:System.String"/> when compared using the specified <paramref name="comparisonType"/>.
            </summary>
            <param name="text">The <see cref="T:System.String"/>to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns><code>true</code> if <paramref name="text"/> matches the end of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32)">
            <summary>
            Retrieves a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            The substring starts at the position specified by <paramref name="offset"/> and has the remaining length.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</param>
            <returns>A <see cref="T:System.String"/> that is equivalent to the substring of remaining length that begins at
            <paramref name="offset"/> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            The substring starts at the position specified by <paramref name="offset"/> and has the specified <paramref name="length"/>.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A <see cref="T:System.String"/> that is equivalent to the substring of length <paramref name="length"/> that begins at
            <paramref name="offset"/> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32)">
            <summary>
            Retrieves a <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> that represents a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            The <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> starts at the position specified by <paramref name="offset"/>.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> that begins at <paramref name="offset"/> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>
            whose length is the remainder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)">
            <summary>
            Retrieves a <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> that represents a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            The <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> starts at the position specified by <paramref name="offset"/> and has the specified <paramref name="length"/>.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> that is equivalent to the substring of length <paramref name="length"/> that begins at <paramref name="offset"/> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Gets the zero-based index of the first occurrence of the character <paramref name="c"/> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            The search starts at <paramref name="start"/> and examines a specified number of <paramref name="count"/> character positions.
            </summary>
            <param name="c">The Unicode character to seek.</param>
            <param name="start">The zero-based index position at which the search starts. </param>
            <param name="count">The number of characters to examine.</param>
            <returns>The zero-based index position of <paramref name="c"/> from the beginning of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)">
            <summary>
            Gets the zero-based index of the first occurrence of the character <paramref name="c"/> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            The search starts at <paramref name="start"/>.
            </summary>
            <param name="c">The Unicode character to seek.</param>
            <param name="start">The zero-based index position at which the search starts. </param>
            <returns>The zero-based index position of <paramref name="c"/> from the beginning of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)">
            <summary>
            Gets the zero-based index of the first occurrence of the character <paramref name="c"/> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.
            </summary>
            <param name="c">The Unicode character to seek.</param>
            <returns>The zero-based index position of <paramref name="c"/> from the beginning of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters. The search starts at a specified character position and examines a specified number
            of character positions.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf
            was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters. The search starts at a specified character position.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf
            was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf
            was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.LastIndexOf(System.Char)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.
            </summary>
            <param name="value">The Unicode character to seek.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Trim">
            <summary>
            Removes all leading and trailing whitespaces.
            </summary>
            <returns>The trimmed <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.TrimStart">
            <summary>
            Removes all leading whitespaces.
            </summary>
            <returns>The trimmed <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.TrimEnd">
            <summary>
            Removes all trailing whitespaces.
            </summary>
            <returns>The trimmed <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Split(System.Char[])">
            <summary>
            Splits a string into StringSegments that are based on the characters in an array.
            </summary>
            <param name="chars">A character array that delimits the substrings in this string, an empty array that
            contains no delimiters, or null.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Primitives.StringTokenizer"/> whose elements contain the StringSegmeents from this instance
            that are delimited by one or more characters in separator.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Indicates whether the specified StringSegment is null or an Empty string.
            </summary>
            <param name="value">The StringSegment to test.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> represented by this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> or <code>String.Empty</code> if the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> does not contain a value.
            </summary>
            <returns>The <see cref="T:System.String"/> represented by this <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> or <code>String.Empty</code> if the <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/> does not contain a value.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.StringTokenizer">
            <summary>
            Tokenizes a <c>string</c> into <see cref="T:Microsoft.Extensions.Primitives.StringSegment"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Primitives.StringTokenizer"/>.
            </summary>
            <param name="value">The <c>string</c> to tokenize.</param>
            <param name="separators">The characters to tokenize by.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringTokenizer.#ctor(Microsoft.Extensions.Primitives.StringSegment,System.Char[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Primitives.StringTokenizer"/>.
            </summary>
            <param name="value">The <c>StringSegment</c> to tokenize.</param>
            <param name="separators">The characters to tokenize by.</param>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.StringValues">
            <summary>
            Represents zero/null, one, or many strings in an efficient way.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadLocalX`1">
            <summary>Provides thread-local storage of data.</summary>
            <typeparam name="T">Specifies the type of data stored per-thread.</typeparam>
            <remarks>
            <para>
            With the exception of <see cref="M:System.Threading.ThreadLocalX`1.Dispose"/>, all public and protected members of 
            <see cref="T:System.Threading.ThreadLocal`1"/> are thread-safe and may be used
            concurrently from multiple threads.
            </para>
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.#ctor">
            <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance.</summary>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.#ctor(System.Boolean)">
            <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance.</summary>
            <param name="trackAllValues">Whether to track all values set on the instance and expose them through the Values property.</param>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.#ctor(System.Func{`0})">
            <summary>
            Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance with the
            specified <paramref name="valueFactory"/> function.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce a lazily-initialized value when 
            an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocalX`1.Value"/> without it having been previously initialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueFactory"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance with the
            specified <paramref name="valueFactory"/> function.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce a lazily-initialized value when 
            an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocalX`1.Value"/> without it having been previously initialized.
            </param>
            <param name="trackAllValues">Whether to track all values set on the instance and expose them via the Values property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueFactory"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.Finalize">
            <summary>Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.</summary>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.Dispose">
            <summary>Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.</summary>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.ThreadLocal{T}"/>, this method is not thread-safe.
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.Dispose(System.Boolean)">
            <summary>Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.</summary>
            <param name="disposing">
            A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.ThreadLocalX`1.Dispose"/>.
            </param>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.ThreadLocal{T}"/>, this method is not thread-safe.
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.ToString">
            <summary>Creates and returns a string representation of this instance for the current thread.</summary>
            <returns>The result of calling <see cref="M:System.Object.ToString"/> on the <see cref="P:System.Threading.ThreadLocalX`1.Value"/>.</returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:System.Threading.ThreadLocalX`1.Value"/> for the current thread is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The initialization function referenced <see cref="P:System.Threading.ThreadLocalX`1.Value"/> in an improper manner.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
            <remarks>
            Calling this method forces initialization for the current thread, as is the
            case with accessing <see cref="P:System.Threading.ThreadLocalX`1.Value"/> directly.
            </remarks>
        </member>
        <member name="P:System.Threading.ThreadLocalX`1.Value">
            <summary>Gets or sets the value of this instance for the current thread.</summary>
            <exception cref="T:System.InvalidOperationException">
            The initialization function referenced <see cref="P:System.Threading.ThreadLocalX`1.Value"/> in an improper manner.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
            <remarks>
            If this instance was not previously initialized for the current thread,
            accessing <see cref="P:System.Threading.ThreadLocalX`1.Value"/> will attempt to initialize it. If an initialization function was 
            supplied during the construction, that initialization will happen by invoking the function 
            to retrieve the initial value for <see cref="P:System.Threading.ThreadLocalX`1.Value"/>.  Otherwise, the default value of 
            <typeparamref name="T"/> will be used.
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.CreateLinkedSlot(System.Threading.ThreadLocalX{`0}.LinkedSlotVolatile[],System.Int32,`0)">
            <summary>Creates a LinkedSlot and inserts it into the linked list for this ThreadLocal instance.</summary>
        </member>
        <member name="P:System.Threading.ThreadLocalX`1.Values">
            <summary>Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.GetValuesAsList">
            <summary>Gets all of the threads' values in a list.</summary>
        </member>
        <member name="P:System.Threading.ThreadLocalX`1.ValuesCountForDebugDisplay">
            <summary>Gets the number of threads that have data in this instance.</summary>
        </member>
        <member name="P:System.Threading.ThreadLocalX`1.IsValueCreated">
            <summary>Gets whether <see cref="P:System.Threading.ThreadLocalX`1.Value"/> is initialized on the current thread.</summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
        </member>
        <member name="P:System.Threading.ThreadLocalX`1.ValueForDebugDisplay">
            <summary>Gets the value of the ThreadLocal&lt;T&gt; for debugging display purposes. It takes care of getting
            the value for the current thread in the ThreadLocal mode.</summary>
        </member>
        <member name="P:System.Threading.ThreadLocalX`1.ValuesForDebugDisplay">
            <summary>Gets the values of all threads that accessed the ThreadLocal&lt;T&gt;.</summary>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.GrowTable(System.Threading.ThreadLocalX{`0}.LinkedSlotVolatile[]@,System.Int32)">
            <summary>Resizes a table to a certain length (or larger).</summary>
        </member>
        <member name="M:System.Threading.ThreadLocalX`1.GetNewTableSize(System.Int32)">
            <summary>Chooses the next larger table size</summary>
        </member>
        <member name="T:System.Threading.ThreadLocalX`1.LinkedSlotVolatile">
            <summary>
            A wrapper struct used as LinkedSlotVolatile[] - an array of LinkedSlot instances, but with volatile semantics
            on array accesses.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadLocalX`1.LinkedSlot">
            <summary>
            A node in the doubly-linked list stored in the ThreadLocal instance.
            
            The value is stored in one of two places:
            
                1. If SlotArray is not null, the value is in SlotArray.Table[id]
                2. If SlotArray is null, the value is in FinalValue.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadLocalX`1.IdManager">
            <summary>A manager class that assigns IDs to ThreadLocal instances</summary>
        </member>
        <member name="T:System.Threading.ThreadLocalX`1.FinalizationHelper">
            <summary>
            A class that facilitates ThreadLocal cleanup after a thread exits.
            
            After a thread with an associated thread-local table has exited, the FinalizationHelper 
            is reponsible for removing back-references to the table. Since an instance of FinalizationHelper 
            is only referenced from a single thread-local slot, the FinalizationHelper will be GC'd once
            the thread has exited.
            
            The FinalizationHelper then locates all LinkedSlot instances with back-references to the table
            (all those LinkedSlot instances can be found by following references from the table slots) and
            releases the table so that it can get GC'd.
            </summary>
        </member>
        <member name="T:System.Threading.SystemThreading_ThreadLocalDebugViewX`1">
            <summary>A debugger view of the ThreadLocal&lt;T&gt; to surface additional debugging properties and 
            to ensure that the ThreadLocal&lt;T&gt; does not become initialized if it was not already.</summary>
        </member>
        <member name="M:System.Threading.SystemThreading_ThreadLocalDebugViewX`1.#ctor(System.Threading.ThreadLocalX{`0})">
            <summary>Constructs a new debugger view object for the provided ThreadLocal object.</summary>
            <param name="tlocal">A ThreadLocal object to browse in the debugger.</param>
        </member>
        <member name="P:System.Threading.SystemThreading_ThreadLocalDebugViewX`1.IsValueCreated">
            <summary>Returns whether the ThreadLocal object is initialized or not.</summary>
        </member>
        <member name="P:System.Threading.SystemThreading_ThreadLocalDebugViewX`1.Value">
            <summary>Returns the value of the ThreadLocal object.</summary>
        </member>
        <member name="P:System.Threading.SystemThreading_ThreadLocalDebugViewX`1.Values">
            <summary>Return all values for all threads that have accessed this instance.</summary>
        </member>
    </members>
</doc>
